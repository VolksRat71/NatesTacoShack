{"version":3,"sources":["webpack:///./src/components/TacoList.js","webpack:///./src/utils/shuffle.js","webpack:///./src/components/IngredientFilter.js","webpack:///./src/pages/tacos.js"],"names":["TacoGridStyles","styled","div","TacoStyles","SingleTaco","taco","name","vegan","ingredients","current","slug","fluid","image","asset","to","className","map","join","alt","TacoList","tacos","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","key","id","IngredientStyles","IngredientFilter","nodes","hashTable","useStaticQuery","ingredientsWithCounts","forEach","_id","count","Object","entries","replace","toLowerCase","TacoPage","data","allSanityTaco","ingredient","pageContext","SEO","title","activeIngredient","query"],"mappings":"sPAMA,IAAMA,EAAiBC,IAAOC,IAAV,2EAAGD,CAAH,qHAOdE,EAAaF,IAAOC,IAAV,uEAAGD,CAAH,mKAchB,SAASG,EAAT,GAOU,IAAD,IANLC,KACIC,EAKC,EALDA,KACAC,EAIC,EAJDA,MACAC,EAGC,EAHDA,YACQC,EAEP,EAFDC,KAAQD,QACUE,EACjB,EADDC,MAASC,MAASF,MAEtB,OACI,kBAACR,EAAD,KACI,kBAAC,IAAD,CAAMW,GAAE,UAAYL,GAChB,4BACI,0BAAMM,UAAU,QAAQT,EAAMC,EAAQ,KAAO,MAGrD,2BAAIC,EAAYQ,KAAI,qBAAGV,QAAiBW,KAAK,OAC7C,kBAAC,IAAD,CAAMH,GAAE,UAAYL,GAChB,kBAAC,IAAD,CAAKE,MAAOA,EAAOO,IAAKZ,MAMzB,SAASa,EAAT,GAA8B,IAAVC,EAAS,EAATA,MAE/B,OCpDW,SAAiBC,GAE5B,IADA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAClB,IAAMD,GACTD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAEzCF,EAAiBD,EADjBG,GAAgB,GAEhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,ED4CzBO,CAAQT,GAEJ,kBAACpB,EAAD,KACKoB,EAAMJ,KAAI,SAAAX,GACP,OAAO,kBAACD,EAAD,CAAY0B,IAAKzB,EAAK0B,GAAI1B,KAAMA,QEnDvD,IAAM2B,EAAmB/B,IAAOC,IAAV,wFAAGD,CAAH,6uBAiEP,SAASgC,IAAoB,IAbTC,EAC3BC,EAaIf,EAAUgB,YAAe,cAAzBhB,MAcFiB,GA5ByBH,EA4BuBd,EA5BvBc,MAC3BC,EAAY,GAChBD,EAAMI,SAAQ,YAAqB,EAAlB9B,YACD8B,SAAQ,YAAoB,IAAjBhC,EAAgB,EAAhBA,KAAMiC,EAAU,EAAVA,IACxBJ,EAAU7B,GAEP6B,EAAU7B,GAAV,QADA6B,EAAU7B,GAAQ,CAAEkC,MAAO,EAAGD,aAKnCE,OAAOC,QAAQP,IAoBtB,OACI,kBAACH,EAAD,KACI,kBAAC,IAAD,CACIjB,UAAWW,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,GAAM,EAAI,KAAO,MAC5Dd,GAAG,UACH,0BAAMC,UAAU,QAAhB,aACA,0BAAMA,UAAU,SAASK,EAAMc,MAAMT,SAExCY,EAAsBrB,KAAI,gBAAEV,EAAF,YAAUkC,EAAV,EAAUA,MAAOD,EAAjB,EAAiBA,IAAjB,OACvB,kBAAC,IAAD,CACIT,IAAKS,EACLxB,UAAWW,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,GAAM,EAAI,KAAO,MAC5Dd,GAAE,eAAiBR,EAAKqC,QAAQ,OAAQ,KAAKC,eAE7C,0BAAM7B,UAAU,QAAQT,GACxB,0BAAMS,UAAU,SAASyB,Q,gBC/F9B,SAASK,EAAT,GAGX,IAFyBzB,EAE1B,EAFC0B,KAAQC,cAAiB3B,MACV4B,EAChB,EADCC,YAAeD,WAEf,OACI,oCACI,kBAACE,EAAA,EAAD,CAAKC,MAAOH,EAAU,cAAiBA,EAAjB,cACtB,kBAACf,EAAD,CAAkBmB,iBAAkBJ,IACpC,kBAAC7B,EAAD,CAAUC,MAAOA,KAKtB,IAAMiC,EAAK","file":"component---src-pages-tacos-js-238f6f0c44b79714c524.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\nimport styled from 'styled-components';\r\nimport shuffle from '../utils/shuffle';\r\n\r\nconst TacoGridStyles = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n    gap: 4rem;\r\n    grid-auto-rows: auto auto 500px;\r\n`;\r\n\r\nconst TacoStyles = styled.div`\r\n    display: grid;\r\n    @supports not (grid-template-rows: subgrid) {\r\n        --rows: auto auto 1fr;\r\n    }\r\n    grid-template-rows: var(--rows, subgrid);\r\n    grid-row: span 3;\r\n    gap: 1rem;\r\n    h2,\r\n    p {\r\n        margin: 0;\r\n    }\r\n`;\r\n\r\nfunction SingleTaco({\r\n    taco: {\r\n        name,\r\n        vegan,\r\n        ingredients,\r\n        slug: { current },\r\n        image: { asset: { fluid } }\r\n    } }) {\r\n    return (\r\n        <TacoStyles>\r\n            <Link to={`/tacos/${current}`}>\r\n                <h2>\r\n                    <span className=\"mark\">{name}{vegan ? 'ðŸŒ±' : ''}</span>\r\n                </h2>\r\n            </Link>\r\n            <p>{ingredients.map(({ name }) => name).join(', ')}</p>\r\n            <Link to={`/tacos/${current}`}>\r\n                <Img fluid={fluid} alt={name} />\r\n            </Link>\r\n        </TacoStyles>\r\n    )\r\n}\r\n\r\nexport default function TacoList({ tacos }) {\r\n    shuffle(tacos)\r\n    return (\r\n        <TacoGridStyles>\r\n            {tacos.map(taco => {\r\n                return <SingleTaco key={taco.id} taco={taco} />\r\n            })}\r\n        </TacoGridStyles>\r\n    )\r\n}","export default function shuffle(array) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    while (0 !== currentIndex) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n}","import React from 'react';\r\nimport { graphql, useStaticQuery, Link } from 'gatsby';\r\nimport styled from 'styled-components';;\r\n\r\nconst IngredientStyles = styled.div`\r\n    /* font-size: 0.7em; */\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-evenly;\r\n    gap: 1rem;\r\n    margin-bottom: 4rem;\r\n    .cw {\r\n        font-size: 0.85em;\r\n        transform: rotate(1.5deg);\r\n        &:hover {\r\n            transform: scale(1.02);\r\n            transform: rotate(-1.5deg);\r\n        }\r\n    }\r\n    .ccw {\r\n        font-size: 0.75em;\r\n        transform: rotate(-1.5deg);\r\n        &:hover {\r\n            transform: scale(1.02);\r\n            transform: rotate(1.5deg);\r\n        }\r\n    }\r\n    a {\r\n        display: grid;\r\n        grid-template-columns: auto 1fr;\r\n        gap: 0 0.5rem;\r\n        padding: 5px;\r\n        background: var(--grey);\r\n        border-radius: 0.5em;\r\n        transition: transform .1s, box-shadow .1s;\r\n        .count{\r\n            background: white;\r\n            padding: 2px 5px;\r\n            border-radius: 50%;\r\n        }\r\n        &:hover {\r\n            box-shadow: 0 2px 5px rgba(0,0,0,0.5);\r\n        }\r\n        &:active {\r\n            transform: scale(.98);\r\n            box-shadow: none;\r\n            background: var(--pale-yellow)\r\n        }\r\n        &[aria-current='page']{\r\n            background: var(--pale-yellow);\r\n            transform: scale(1.02);\r\n            box-shadow: 0 2px 5px rgba(0,0,0,0.5);\r\n        }\r\n    }\r\n`;\r\n\r\nfunction countTacosInIngredients({ nodes }) {\r\n    let hashTable = {}\r\n    nodes.forEach(({ ingredients }) => {\r\n        ingredients.forEach(({ name, _id }) => {\r\n            !hashTable[name] ?\r\n                hashTable[name] = { count: 1, _id } :\r\n                hashTable[name]['count']++\r\n        })\r\n    })\r\n\r\n    return Object.entries(hashTable)\r\n}\r\n\r\nexport default function IngredientFilter() {\r\n    const { tacos } = useStaticQuery(graphql`\r\n        query {\r\n            tacos: allSanityTaco {\r\n                nodes {\r\n                    vegan\r\n                    ingredients {\r\n                        name\r\n                        _id\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `)\r\n\r\n    const ingredientsWithCounts = countTacosInIngredients(tacos);\r\n\r\n    return (\r\n        <IngredientStyles>\r\n            <Link\r\n                className={Math.floor(Math.random() * 2) % 2 === 0 ? \"cw\" : \"ccw\"}\r\n                to=\"/tacos\">\r\n                <span className=\"name\">All Tacos</span>\r\n                <span className=\"count\">{tacos.nodes.length}</span>\r\n            </Link>\r\n            {ingredientsWithCounts.map(([name, { count, _id }]) => (\r\n                <Link\r\n                    key={_id}\r\n                    className={Math.floor(Math.random() * 2) % 2 === 0 ? \"cw\" : \"ccw\"}\r\n                    to={`/ingredient/${name.replace(/\\s+/g, '-').toLowerCase()}`}\r\n                >\r\n                    <span className=\"name\">{name}</span>\r\n                    <span className=\"count\">{count}</span>\r\n                </Link>\r\n            ))}\r\n        </IngredientStyles>\r\n    )\r\n}","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport TacoList from '../components/TacoList';\r\nimport IngredientFilter from '../components/IngredientFilter';\r\nimport SEO from '../components/SEO';\r\n\r\nexport default function TacoPage({\r\n    data: { allSanityTaco: { tacos } },\r\n    pageContext: { ingredient }\r\n}) {\r\n    return (\r\n        <>\r\n            <SEO title={ingredient ? `Tacos with ${ingredient}` : `All Tacos`} />\r\n            <IngredientFilter activeIngredient={ingredient} />\r\n            <TacoList tacos={tacos} />\r\n        </>\r\n    )\r\n};\r\n\r\nexport const query = graphql`\r\n  query TacoQuery($ingredientRegex: String){\r\n    allSanityTaco(\r\n        filter: {\r\n            ingredients: {\r\n                elemMatch: {\r\n                    name: {\r\n                        regex: $ingredientRegex\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    ) {\r\n        # renamed names to tacos in props\r\n        tacos: nodes {\r\n            id\r\n            name\r\n            price\r\n            vegan\r\n            slug {\r\n                current\r\n            }\r\n            ingredients {\r\n                id\r\n                name\r\n            }\r\n            image {\r\n                asset {\r\n                fluid(maxWidth: 400){\r\n                    ...GatsbySanityImageFluid\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n  }\r\n`;"],"sourceRoot":""}